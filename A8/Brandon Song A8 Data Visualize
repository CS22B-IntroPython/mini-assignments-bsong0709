{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XXueMou6e2fW"
      },
      "source": [
        "# Data Visualization exercise"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "id": "hyL8ePRTe2fa"
      },
      "outputs": [],
      "source": [
        "# importing the package(s) we want to use\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### The input file is tab-delimited\n",
        "tsv_Filepath = \"https://raw.githubusercontent.com/csbfx/advpy122-data/master/euk.tsv\"\n",
        "# we can specify the delimiter by using the sep keyword argument\n",
        "euk = pd.read_csv(tsv_Filepath, sep='\\t')"
      ],
      "metadata": {
        "id": "QXI7GiG3RA4e"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### Using .head() and .tail() to see data content\n",
        "euk.head()"
      ],
      "metadata": {
        "id": "jt0bxDd-ROGR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "outputId": "64a35a86-4baa-43da-b9ad-734e9d6bc5e6"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                      Species   Kingdom           Class  Size (Mb)      GC%  \\\n",
              "0  Emiliania huxleyi CCMP1516  Protists  Other Protists    167.676     64.5   \n",
              "1        Arabidopsis thaliana    Plants     Land Plants    119.669  36.0529   \n",
              "2                 Glycine max    Plants     Land Plants    979.046  35.1153   \n",
              "3         Medicago truncatula    Plants     Land Plants    412.924   34.047   \n",
              "4        Solanum lycopersicum    Plants     Land Plants    828.349  35.6991   \n",
              "\n",
              "  Number of genes Number of proteins  Publication year Assembly status  \n",
              "0           38549              38554              2013        Scaffold  \n",
              "1           38311              48265              2001      Chromosome  \n",
              "2           59847              71219              2010      Chromosome  \n",
              "3           37603              41939              2011      Chromosome  \n",
              "4           31200              37660              2010      Chromosome  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ff1e138b-6610-41c8-a476-1f7006272f12\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Species</th>\n",
              "      <th>Kingdom</th>\n",
              "      <th>Class</th>\n",
              "      <th>Size (Mb)</th>\n",
              "      <th>GC%</th>\n",
              "      <th>Number of genes</th>\n",
              "      <th>Number of proteins</th>\n",
              "      <th>Publication year</th>\n",
              "      <th>Assembly status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Emiliania huxleyi CCMP1516</td>\n",
              "      <td>Protists</td>\n",
              "      <td>Other Protists</td>\n",
              "      <td>167.676</td>\n",
              "      <td>64.5</td>\n",
              "      <td>38549</td>\n",
              "      <td>38554</td>\n",
              "      <td>2013</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Arabidopsis thaliana</td>\n",
              "      <td>Plants</td>\n",
              "      <td>Land Plants</td>\n",
              "      <td>119.669</td>\n",
              "      <td>36.0529</td>\n",
              "      <td>38311</td>\n",
              "      <td>48265</td>\n",
              "      <td>2001</td>\n",
              "      <td>Chromosome</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Glycine max</td>\n",
              "      <td>Plants</td>\n",
              "      <td>Land Plants</td>\n",
              "      <td>979.046</td>\n",
              "      <td>35.1153</td>\n",
              "      <td>59847</td>\n",
              "      <td>71219</td>\n",
              "      <td>2010</td>\n",
              "      <td>Chromosome</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Medicago truncatula</td>\n",
              "      <td>Plants</td>\n",
              "      <td>Land Plants</td>\n",
              "      <td>412.924</td>\n",
              "      <td>34.047</td>\n",
              "      <td>37603</td>\n",
              "      <td>41939</td>\n",
              "      <td>2011</td>\n",
              "      <td>Chromosome</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Solanum lycopersicum</td>\n",
              "      <td>Plants</td>\n",
              "      <td>Land Plants</td>\n",
              "      <td>828.349</td>\n",
              "      <td>35.6991</td>\n",
              "      <td>31200</td>\n",
              "      <td>37660</td>\n",
              "      <td>2010</td>\n",
              "      <td>Chromosome</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ff1e138b-6610-41c8-a476-1f7006272f12')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ff1e138b-6610-41c8-a476-1f7006272f12 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ff1e138b-6610-41c8-a476-1f7006272f12');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-346d5f5c-32dc-4985-a871-4dddc274dac2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-346d5f5c-32dc-4985-a871-4dddc274dac2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-346d5f5c-32dc-4985-a871-4dddc274dac2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "euk",
              "summary": "{\n  \"name\": \"euk\",\n  \"rows\": 8302,\n  \"fields\": [\n    {\n      \"column\": \"Species\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4936,\n        \"samples\": [\n          \"Mrakia blollopis\",\n          \"Toxoplasma gondii TgCATBr5\",\n          \"Drosophila grimshawi\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kingdom\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Plants\",\n          \"Other\",\n          \"Fungi\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Class\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 19,\n        \"samples\": [\n          \"Other Protists\",\n          \"Apicomplexans\",\n          \"Mammals\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Size (Mb)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1111.5382890873323,\n        \"min\": 0.011236,\n        \"max\": 32396.4,\n        \"num_unique_values\": 8203,\n        \"samples\": [\n          42.713,\n          4.9454,\n          43.5021\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GC%\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1857,\n        \"samples\": [\n          \"27.9\",\n          \"36.7747\",\n          \"40.1912\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Number of genes\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2239,\n        \"samples\": [\n          \"17642\",\n          \"40259\",\n          \"8569\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Number of proteins\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2214,\n        \"samples\": [\n          \"19503\",\n          \"11966\",\n          \"11491\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Publication year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1992,\n        \"max\": 2019,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2008,\n          2003,\n          2013\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Assembly status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Chromosome\",\n          \"Contig\",\n          \"Scaffold\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### .info() to provide information on the data\n",
        "euk.info()"
      ],
      "metadata": {
        "id": "-GKOt3-LRT7_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4253f022-126a-4507-cb3d-b2184ed75dfb"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 8302 entries, 0 to 8301\n",
            "Data columns (total 9 columns):\n",
            " #   Column              Non-Null Count  Dtype  \n",
            "---  ------              --------------  -----  \n",
            " 0   Species             8302 non-null   object \n",
            " 1   Kingdom             8302 non-null   object \n",
            " 2   Class               8302 non-null   object \n",
            " 3   Size (Mb)           8302 non-null   float64\n",
            " 4   GC%                 8302 non-null   object \n",
            " 5   Number of genes     8302 non-null   object \n",
            " 6   Number of proteins  8302 non-null   object \n",
            " 7   Publication year    8302 non-null   int64  \n",
            " 8   Assembly status     8302 non-null   object \n",
            "dtypes: float64(1), int64(1), object(7)\n",
            "memory usage: 583.9+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### What to do with '-' values?\n",
        "## Change \"-\" into NAs\n",
        "euk_nan = euk.replace('-', np.nan)\n"
      ],
      "metadata": {
        "id": "WImi4eN1RXrk"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Visualize the relationship between two variables\n",
        "\n",
        "Can you see the relationship between genome size and the number of genes?\n",
        "\n"
      ],
      "metadata": {
        "id": "IGUpoCSgSFNj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "It is hard for us to see patterns by reading large tables of data. For example, look at the following table that contains the genome size and the number of genes for reptiles. Can you see the relationship between genome size and the number of genes?"
      ],
      "metadata": {
        "id": "LLZulrBBSOn4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "## Look only look at reptile data using class 'Reptiles'\n",
        "euk_reptiles = euk_nan[euk_nan['Class'] == 'Reptiles']\n",
        "euk_reptiles\n"
      ],
      "metadata": {
        "id": "mridMYkCSnc7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "082f7df7-3848-4d2a-cc23-58e97645aa60"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                           Species  Kingdom     Class  Size (Mb)      GC%  \\\n",
              "282            Anolis carolinensis  Animals  Reptiles    1799.14  40.8238   \n",
              "543            Sphenodon punctatus  Animals  Reptiles    4272.21      NaN   \n",
              "565               Pogona vitticeps  Animals  Reptiles    1716.68     42.1   \n",
              "589      Platysternon megacephalum  Animals  Reptiles    2319.09     43.9   \n",
              "612               Podarcis muralis  Animals  Reptiles    1511.00  44.2057   \n",
              "650              Cuora amboinensis  Animals  Reptiles    2214.83     43.9   \n",
              "730             Ophiophagus hannah  Animals  Reptiles    1594.07     40.6   \n",
              "944         Chrysemys picta bellii  Animals  Reptiles    2365.77   44.564   \n",
              "1122                Chelonia mydas  Animals  Reptiles    2208.41     43.7   \n",
              "1136    Alligator mississippiensis  Animals  Reptiles    2161.73     44.4   \n",
              "1150            Crocodylus porosus  Animals  Reptiles    2049.54     44.2   \n",
              "1218             Notechis scutatus  Animals  Reptiles    1665.53     40.2   \n",
              "1224            Vipera berus berus  Animals  Reptiles    1532.39     41.3   \n",
              "1248           Pelodiscus sinensis  Animals  Reptiles    2202.48  44.4999   \n",
              "1294             Apalone spinifera  Animals  Reptiles    1931.08     42.8   \n",
              "1372             Crotalus horridus  Animals  Reptiles    1520.33     34.3   \n",
              "1376           Thamnophis sirtalis  Animals  Reptiles    1424.90     41.8   \n",
              "1513             Python bivittatus  Animals  Reptiles    1435.05     39.7   \n",
              "1526  Protobothrops mucrosquamatus  Animals  Reptiles    1673.88     40.6   \n",
              "1576            Alligator sinensis  Animals  Reptiles    2270.57     44.6   \n",
              "2135         Pantherophis guttatus  Animals  Reptiles    1404.22     38.3   \n",
              "2142               Gekko japonicus  Animals  Reptiles    2490.27     45.5   \n",
              "2175               Paroedura picta  Animals  Reptiles    1694.16     40.7   \n",
              "2186             Lacerta bilineata  Animals  Reptiles    1418.15      NaN   \n",
              "2425    Protobothrops flavoviridis  Animals  Reptiles    1413.20     38.2   \n",
              "2519  Malaclemys terrapin terrapin  Animals  Reptiles    2439.75     44.5   \n",
              "2808              Crotalus pyrrhus  Animals  Reptiles    1126.79     38.5   \n",
              "2830            Thermophis baileyi  Animals  Reptiles    1747.68      NaN   \n",
              "3021            Gopherus agassizii  Animals  Reptiles    2184.97       43   \n",
              "3054  Terrapene mexicana triunguis  Animals  Reptiles    2571.27     44.6   \n",
              "3239               Lacerta viridis  Animals  Reptiles    1439.84     43.7   \n",
              "3463      Crotalus viridis viridis  Animals  Reptiles    1340.20  39.3623   \n",
              "3487           Pseudonaja textilis  Animals  Reptiles    1590.04     40.1   \n",
              "3495             Salvator merianae  Animals  Reptiles    2068.17     41.5   \n",
              "3496        Chelonoidis abingdonii  Animals  Reptiles    2300.75     45.4   \n",
              "3747                 Cuora mccordi  Animals  Reptiles    2390.37     44.6   \n",
              "3810        Hydrophis cyanocinctus  Animals  Reptiles    1389.86     37.6   \n",
              "3811          Hydrophis hardwickii  Animals  Reptiles    1296.39     37.2   \n",
              "4556            Crocodylus porosus  Animals  Reptiles    2120.57     44.3   \n",
              "4561    Alligator mississippiensis  Animals  Reptiles    2161.71     44.3   \n",
              "5274    Alligator mississippiensis  Animals  Reptiles    2156.98     44.3   \n",
              "\n",
              "     Number of genes Number of proteins  Publication year Assembly status  \n",
              "282            22092              34827              2007      Chromosome  \n",
              "543              NaN                NaN              2018        Scaffold  \n",
              "565            21445              38203              2015        Scaffold  \n",
              "589              NaN                NaN              2018        Scaffold  \n",
              "612              NaN                NaN              2019      Chromosome  \n",
              "650              NaN                NaN              2019        Scaffold  \n",
              "730              NaN                NaN              2013        Scaffold  \n",
              "944            25289              46651              2012      Chromosome  \n",
              "1122           22336              28672              2013        Scaffold  \n",
              "1136           25012              42388              2012        Scaffold  \n",
              "1150           19551              28676              2016        Scaffold  \n",
              "1218           22413              31232              2018        Scaffold  \n",
              "1224             NaN                NaN              2014        Scaffold  \n",
              "1248           24516              38587              2012        Scaffold  \n",
              "1294             NaN                NaN              2013        Scaffold  \n",
              "1372             NaN                NaN              2016        Scaffold  \n",
              "1376           20101              25180              2015        Scaffold  \n",
              "1513           21877              32724              2013        Scaffold  \n",
              "1526           21073              22660              2016        Scaffold  \n",
              "1576           24320              43105              2013        Scaffold  \n",
              "2135             NaN                NaN              2015        Scaffold  \n",
              "2142           21197              24192              2015        Scaffold  \n",
              "2175             NaN                NaN              2018        Scaffold  \n",
              "2186             NaN                NaN              2018          Contig  \n",
              "2425             NaN                NaN              2018        Scaffold  \n",
              "2519              13                 13              2016          Contig  \n",
              "2808             NaN                NaN              2014        Scaffold  \n",
              "2830             NaN                NaN              2018        Scaffold  \n",
              "3021             NaN                NaN              2018        Scaffold  \n",
              "3054           24657              36743              2018        Scaffold  \n",
              "3239             NaN                NaN              2018          Contig  \n",
              "3463             NaN                NaN              2018      Chromosome  \n",
              "3487           22151              31677              2018        Scaffold  \n",
              "3495             NaN                NaN              2018        Scaffold  \n",
              "3496             NaN                NaN              2018        Scaffold  \n",
              "3747             NaN                NaN              2018        Scaffold  \n",
              "3810             NaN                NaN              2019        Scaffold  \n",
              "3811             NaN                NaN              2019        Scaffold  \n",
              "4556             NaN                NaN              2014        Scaffold  \n",
              "4561             NaN                NaN              2016        Scaffold  \n",
              "5274             NaN                NaN              2016        Scaffold  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-91886fac-271e-4dec-a65f-93809d138736\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Species</th>\n",
              "      <th>Kingdom</th>\n",
              "      <th>Class</th>\n",
              "      <th>Size (Mb)</th>\n",
              "      <th>GC%</th>\n",
              "      <th>Number of genes</th>\n",
              "      <th>Number of proteins</th>\n",
              "      <th>Publication year</th>\n",
              "      <th>Assembly status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>282</th>\n",
              "      <td>Anolis carolinensis</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1799.14</td>\n",
              "      <td>40.8238</td>\n",
              "      <td>22092</td>\n",
              "      <td>34827</td>\n",
              "      <td>2007</td>\n",
              "      <td>Chromosome</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>543</th>\n",
              "      <td>Sphenodon punctatus</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>4272.21</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>565</th>\n",
              "      <td>Pogona vitticeps</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1716.68</td>\n",
              "      <td>42.1</td>\n",
              "      <td>21445</td>\n",
              "      <td>38203</td>\n",
              "      <td>2015</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>589</th>\n",
              "      <td>Platysternon megacephalum</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>2319.09</td>\n",
              "      <td>43.9</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>612</th>\n",
              "      <td>Podarcis muralis</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1511.00</td>\n",
              "      <td>44.2057</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2019</td>\n",
              "      <td>Chromosome</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>650</th>\n",
              "      <td>Cuora amboinensis</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>2214.83</td>\n",
              "      <td>43.9</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2019</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>730</th>\n",
              "      <td>Ophiophagus hannah</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1594.07</td>\n",
              "      <td>40.6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2013</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>944</th>\n",
              "      <td>Chrysemys picta bellii</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>2365.77</td>\n",
              "      <td>44.564</td>\n",
              "      <td>25289</td>\n",
              "      <td>46651</td>\n",
              "      <td>2012</td>\n",
              "      <td>Chromosome</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1122</th>\n",
              "      <td>Chelonia mydas</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>2208.41</td>\n",
              "      <td>43.7</td>\n",
              "      <td>22336</td>\n",
              "      <td>28672</td>\n",
              "      <td>2013</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1136</th>\n",
              "      <td>Alligator mississippiensis</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>2161.73</td>\n",
              "      <td>44.4</td>\n",
              "      <td>25012</td>\n",
              "      <td>42388</td>\n",
              "      <td>2012</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1150</th>\n",
              "      <td>Crocodylus porosus</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>2049.54</td>\n",
              "      <td>44.2</td>\n",
              "      <td>19551</td>\n",
              "      <td>28676</td>\n",
              "      <td>2016</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1218</th>\n",
              "      <td>Notechis scutatus</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1665.53</td>\n",
              "      <td>40.2</td>\n",
              "      <td>22413</td>\n",
              "      <td>31232</td>\n",
              "      <td>2018</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1224</th>\n",
              "      <td>Vipera berus berus</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1532.39</td>\n",
              "      <td>41.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2014</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1248</th>\n",
              "      <td>Pelodiscus sinensis</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>2202.48</td>\n",
              "      <td>44.4999</td>\n",
              "      <td>24516</td>\n",
              "      <td>38587</td>\n",
              "      <td>2012</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1294</th>\n",
              "      <td>Apalone spinifera</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1931.08</td>\n",
              "      <td>42.8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2013</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1372</th>\n",
              "      <td>Crotalus horridus</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1520.33</td>\n",
              "      <td>34.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2016</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1376</th>\n",
              "      <td>Thamnophis sirtalis</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1424.90</td>\n",
              "      <td>41.8</td>\n",
              "      <td>20101</td>\n",
              "      <td>25180</td>\n",
              "      <td>2015</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1513</th>\n",
              "      <td>Python bivittatus</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1435.05</td>\n",
              "      <td>39.7</td>\n",
              "      <td>21877</td>\n",
              "      <td>32724</td>\n",
              "      <td>2013</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1526</th>\n",
              "      <td>Protobothrops mucrosquamatus</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1673.88</td>\n",
              "      <td>40.6</td>\n",
              "      <td>21073</td>\n",
              "      <td>22660</td>\n",
              "      <td>2016</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1576</th>\n",
              "      <td>Alligator sinensis</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>2270.57</td>\n",
              "      <td>44.6</td>\n",
              "      <td>24320</td>\n",
              "      <td>43105</td>\n",
              "      <td>2013</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2135</th>\n",
              "      <td>Pantherophis guttatus</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1404.22</td>\n",
              "      <td>38.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2015</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2142</th>\n",
              "      <td>Gekko japonicus</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>2490.27</td>\n",
              "      <td>45.5</td>\n",
              "      <td>21197</td>\n",
              "      <td>24192</td>\n",
              "      <td>2015</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2175</th>\n",
              "      <td>Paroedura picta</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1694.16</td>\n",
              "      <td>40.7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2186</th>\n",
              "      <td>Lacerta bilineata</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1418.15</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018</td>\n",
              "      <td>Contig</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2425</th>\n",
              "      <td>Protobothrops flavoviridis</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1413.20</td>\n",
              "      <td>38.2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2519</th>\n",
              "      <td>Malaclemys terrapin terrapin</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>2439.75</td>\n",
              "      <td>44.5</td>\n",
              "      <td>13</td>\n",
              "      <td>13</td>\n",
              "      <td>2016</td>\n",
              "      <td>Contig</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2808</th>\n",
              "      <td>Crotalus pyrrhus</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1126.79</td>\n",
              "      <td>38.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2014</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2830</th>\n",
              "      <td>Thermophis baileyi</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1747.68</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3021</th>\n",
              "      <td>Gopherus agassizii</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>2184.97</td>\n",
              "      <td>43</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3054</th>\n",
              "      <td>Terrapene mexicana triunguis</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>2571.27</td>\n",
              "      <td>44.6</td>\n",
              "      <td>24657</td>\n",
              "      <td>36743</td>\n",
              "      <td>2018</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3239</th>\n",
              "      <td>Lacerta viridis</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1439.84</td>\n",
              "      <td>43.7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018</td>\n",
              "      <td>Contig</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3463</th>\n",
              "      <td>Crotalus viridis viridis</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1340.20</td>\n",
              "      <td>39.3623</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018</td>\n",
              "      <td>Chromosome</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3487</th>\n",
              "      <td>Pseudonaja textilis</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1590.04</td>\n",
              "      <td>40.1</td>\n",
              "      <td>22151</td>\n",
              "      <td>31677</td>\n",
              "      <td>2018</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3495</th>\n",
              "      <td>Salvator merianae</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>2068.17</td>\n",
              "      <td>41.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3496</th>\n",
              "      <td>Chelonoidis abingdonii</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>2300.75</td>\n",
              "      <td>45.4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3747</th>\n",
              "      <td>Cuora mccordi</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>2390.37</td>\n",
              "      <td>44.6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2018</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3810</th>\n",
              "      <td>Hydrophis cyanocinctus</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1389.86</td>\n",
              "      <td>37.6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2019</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3811</th>\n",
              "      <td>Hydrophis hardwickii</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>1296.39</td>\n",
              "      <td>37.2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2019</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4556</th>\n",
              "      <td>Crocodylus porosus</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>2120.57</td>\n",
              "      <td>44.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2014</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4561</th>\n",
              "      <td>Alligator mississippiensis</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>2161.71</td>\n",
              "      <td>44.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2016</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5274</th>\n",
              "      <td>Alligator mississippiensis</td>\n",
              "      <td>Animals</td>\n",
              "      <td>Reptiles</td>\n",
              "      <td>2156.98</td>\n",
              "      <td>44.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2016</td>\n",
              "      <td>Scaffold</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-91886fac-271e-4dec-a65f-93809d138736')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-91886fac-271e-4dec-a65f-93809d138736 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-91886fac-271e-4dec-a65f-93809d138736');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fd989c3a-878b-456c-b703-9074f2de6ea5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fd989c3a-878b-456c-b703-9074f2de6ea5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fd989c3a-878b-456c-b703-9074f2de6ea5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_bba7358f-0ffb-46dc-ad4f-a01b7b8a21b6\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('euk_reptiles')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_bba7358f-0ffb-46dc-ad4f-a01b7b8a21b6 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('euk_reptiles');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "euk_reptiles",
              "summary": "{\n  \"name\": \"euk_reptiles\",\n  \"rows\": 41,\n  \"fields\": [\n    {\n      \"column\": \"Species\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 38,\n        \"samples\": [\n          \"Salvator merianae\",\n          \"Hydrophis cyanocinctus\",\n          \"Podarcis muralis\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kingdom\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Animals\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Class\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Reptiles\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Size (Mb)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 548.7859169891386,\n        \"min\": 1126.79,\n        \"max\": 4272.21,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          1413.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GC%\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 31,\n        \"samples\": [\n          \"45.4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Number of genes\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 16,\n        \"samples\": [\n          \"22092\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Number of proteins\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 16,\n        \"samples\": [\n          \"34827\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Publication year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2007,\n        \"max\": 2019,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2018\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Assembly status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Chromosome\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Pick out data for just Reptiles with genome size < 4000\n",
        "euk_reptiles_size = euk_nan[euk_nan['Class'] == 'Reptiles'][euk['Size (Mb)'] < 4000]\n",
        "euk_reptiles_size['Number of genes'] = euk_reptiles_size['Number of genes'].astype('float64')\n",
        "euk_reptiles_size.info()\n",
        "# euk_reptiles_size['Number of genes'].astype('Int64')"
      ],
      "metadata": {
        "id": "WpqsWKdWjxxT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cd6d2f2d-9c8a-4d9d-a068-14acf72f40a2"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 40 entries, 282 to 5274\n",
            "Data columns (total 9 columns):\n",
            " #   Column              Non-Null Count  Dtype  \n",
            "---  ------              --------------  -----  \n",
            " 0   Species             40 non-null     object \n",
            " 1   Kingdom             40 non-null     object \n",
            " 2   Class               40 non-null     object \n",
            " 3   Size (Mb)           40 non-null     float64\n",
            " 4   GC%                 38 non-null     object \n",
            " 5   Number of genes     16 non-null     float64\n",
            " 6   Number of proteins  16 non-null     object \n",
            " 7   Publication year    40 non-null     int64  \n",
            " 8   Assembly status     40 non-null     object \n",
            "dtypes: float64(2), int64(1), object(6)\n",
            "memory usage: 3.1+ KB\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-77-1d62fba49083>:2: UserWarning: Boolean Series key will be reindexed to match DataFrame index.\n",
            "  euk_reptiles_size = euk_nan[euk_nan['Class'] == 'Reptiles'][euk['Size (Mb)'] < 4000]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Use `relplot` to look at relationships\n",
        "We will use the `relplot` function, and the names of the columns that we want on the `X` and `Y` axes to look at the relationship between genome size and number of genes in Reptiles"
      ],
      "metadata": {
        "id": "6sAgJ9x7kSGA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "### Relationship plot between genome size and number of genes in Retiles\n",
        "sns.relplot(data=euk_reptiles_size, x='Size (Mb)', y='Number of genes');"
      ],
      "metadata": {
        "id": "y3KxiFjpT0My",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 506
        },
        "outputId": "3ccb6e37-357b-4088-ca6b-c1837b0c964b"
      },
      "execution_count": 110,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Can you create a new column to look at gene density?\n",
        "gene density = Number of genes / Size (Mb)"
      ],
      "metadata": {
        "id": "MquzHxvyVak0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "### Your Code\n",
        "gene_density = euk_reptiles_size['Number of genes'] / euk_reptiles_size['Size (Mb)']\n",
        "gene_density"
      ],
      "metadata": {
        "id": "izWushvwlTnq",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "97c22062-7d6b-4dae-fc28-8ccbf55c0dbc"
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "282     12.279200\n",
              "565     12.492136\n",
              "589           NaN\n",
              "612           NaN\n",
              "650           NaN\n",
              "730           NaN\n",
              "944     10.689543\n",
              "1122    10.114064\n",
              "1136    11.570363\n",
              "1150     9.539214\n",
              "1218    13.456978\n",
              "1224          NaN\n",
              "1248    11.131089\n",
              "1294          NaN\n",
              "1372          NaN\n",
              "1376    14.106955\n",
              "1513    15.244765\n",
              "1526    12.589313\n",
              "1576    10.710967\n",
              "2135          NaN\n",
              "2142     8.511928\n",
              "2175          NaN\n",
              "2186          NaN\n",
              "2425          NaN\n",
              "2519     0.005328\n",
              "2808          NaN\n",
              "2830          NaN\n",
              "3021          NaN\n",
              "3054     9.589425\n",
              "3239          NaN\n",
              "3463          NaN\n",
              "3487    13.931096\n",
              "3495          NaN\n",
              "3496          NaN\n",
              "3747          NaN\n",
              "3810          NaN\n",
              "3811          NaN\n",
              "4556          NaN\n",
              "4561          NaN\n",
              "5274          NaN\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>282</th>\n",
              "      <td>12.279200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>565</th>\n",
              "      <td>12.492136</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>589</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>612</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>650</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>730</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>944</th>\n",
              "      <td>10.689543</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1122</th>\n",
              "      <td>10.114064</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1136</th>\n",
              "      <td>11.570363</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1150</th>\n",
              "      <td>9.539214</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1218</th>\n",
              "      <td>13.456978</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1224</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1248</th>\n",
              "      <td>11.131089</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1294</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1372</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1376</th>\n",
              "      <td>14.106955</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1513</th>\n",
              "      <td>15.244765</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1526</th>\n",
              "      <td>12.589313</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1576</th>\n",
              "      <td>10.710967</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2135</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2142</th>\n",
              "      <td>8.511928</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2175</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2186</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2425</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2519</th>\n",
              "      <td>0.005328</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2808</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2830</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3021</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3054</th>\n",
              "      <td>9.589425</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3239</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3463</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3487</th>\n",
              "      <td>13.931096</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3495</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3496</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3747</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3810</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3811</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4556</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4561</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5274</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### Create the plot that represents the relation between Size (Mb) and density\n",
        "# Is it what you expected?\n",
        "sns.relplot(data=euk_reptiles_size, x='Size (Mb)', y=gene_density).set_axis_labels('Size (Mb)', 'Gene Density')\n",
        "# It's not necessarily what I expected since I thought the gene density would stay the same but it seems like\n",
        "# as the size of the genome increases, the gene density decreases"
      ],
      "metadata": {
        "id": "1qJhlnOclbUz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 525
        },
        "outputId": "b24abae3-83df-4d22-d04e-a00a62888a68"
      },
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7928096b4910>"
            ]
          },
          "metadata": {},
          "execution_count": 85
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Seaborn\n",
        "These are other `kind` plots that we did not try in lectures. Look up seaborn documentation and try to create these new plots.\n",
        "\n",
        "1.   Create a violin plot for genome size distribution against Class Land Plants.\n",
        "2.   Create a scatter plot showing the relationship between Kingdom and Publication year\n",
        "3. Create a bar plot for GC% for each Kingdom"
      ],
      "metadata": {
        "id": "jI7OyOVrl7AG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "### Your code - Create a violin plot for genome size distribution against Class Land Plants.\n",
        "euk_land_plants = euk[euk['Class'] == 'Land Plants']\n",
        "sns.violinplot(data=euk_land_plants, x='Class', y='Size (Mb)');\n"
      ],
      "metadata": {
        "id": "YdZbDsSMnQMn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 451
        },
        "outputId": "6374e65e-b55a-40c6-de69-8954e4dc9628"
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### Your code - Create a scatter plot showing the relationship between Kingdom and Publication year\n",
        "sns.scatterplot(data=euk, x='Publication year', y='Kingdom');"
      ],
      "metadata": {
        "id": "Tc1sRZl6nVug",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "outputId": "4ef4fd0b-8bde-4571-bd24-6fdb255aff13"
      },
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### Your code - Create a bar plot for GC% for each Kingdom\n",
        "sns.barplot(data=euk_nan, x='Kingdom', y='GC%');\n"
      ],
      "metadata": {
        "id": "GBtDWnaEnZfY",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "outputId": "087bb073-116c-43e3-9e14-a5d0bc2075ee"
      },
      "execution_count": 158,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "fmHYsMMOT1dl"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "hide_input": false,
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.3"
    },
    "toc": {
      "base_numbering": 1,
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": false,
      "title_cell": "Table of Contents",
      "title_sidebar": "Contents",
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": true,
      "toc_window_display": false
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}